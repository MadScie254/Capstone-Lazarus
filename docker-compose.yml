# CAPSTONE-LAZARUS: Docker Compose Configuration
# Multi-service orchestration for development and production

version: '3.8'

services:
  # ============================================================================
  # Streamlit App Service
  # ============================================================================
  streamlit-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: capstone-streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:rw
      - ./logs:/app/logs:rw
      - ./experiments:/app/experiments:rw
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    networks:
      - capstone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # FastAPI Service (Model Serving)
  # ============================================================================
  fastapi-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: inference
    container_name: capstone-fastapi
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs:rw
    environment:
      - FASTAPI_ENV=production
      - WORKERS=4
    networks:
      - capstone-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Redis Service (Caching)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: capstone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - capstone-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ============================================================================
  # PostgreSQL Service (Metadata & Experiments)
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: capstone-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=capstone_lazarus
      - POSTGRES_USER=capstone_user
      - POSTGRES_PASSWORD=capstone_password_2024
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - capstone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U capstone_user -d capstone_lazarus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # MLflow Service (Experiment Tracking)
  # ============================================================================
  mlflow:
    image: python:3.11-slim
    container_name: capstone-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://capstone_user:capstone_password_2024@postgres:5432/capstone_lazarus
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
      - ./requirements-mlflow.txt:/tmp/requirements.txt:ro
    networks:
      - capstone-network
    restart: unless-stopped
    depends_on:
      - postgres
    command: |
      bash -c "
      pip install -r /tmp/requirements.txt &&
      mlflow server --backend-store-uri postgresql://capstone_user:capstone_password_2024@postgres:5432/capstone_lazarus --default-artifact-root /mlflow/artifacts --host 0.0.0.0 --port 5000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # TensorBoard Service (Visualization)
  # ============================================================================
  tensorboard:
    image: tensorflow/tensorflow:2.15.0
    container_name: capstone-tensorboard
    ports:
      - "6006:6006"
    volumes:
      - ./logs/tensorboard:/logs:ro
    networks:
      - capstone-network
    restart: unless-stopped
    command: tensorboard --logdir=/logs --host=0.0.0.0 --port=6006
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6006"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Jupyter Lab Service (Development)
  # ============================================================================
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: capstone-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks:rw
      - ./data:/app/data:rw
      - ./src:/app/src:rw
      - ./models:/app/models:rw
      - ./experiments:/app/experiments:rw
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=capstone_lazarus_token_2024
    networks:
      - capstone-network
    restart: unless-stopped
    command: >
      bash -c "
      jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root 
      --NotebookApp.token='capstone_lazarus_token_2024' 
      --NotebookApp.allow_origin='*'
      --NotebookApp.base_url='/lab'
      "
    profiles:
      - development

  # ============================================================================
  # Nginx Reverse Proxy
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: capstone-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - capstone-network
    restart: unless-stopped
    depends_on:
      - streamlit-app
      - fastapi-service
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # ============================================================================
  # Monitoring: Prometheus
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: capstone-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - capstone-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # ============================================================================
  # Monitoring: Grafana
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: capstone-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=capstone_grafana_2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - capstone-network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

# ============================================================================
# Networks
# ============================================================================
networks:
  capstone-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mlflow-artifacts:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ============================================================================
# Development Override
# ============================================================================
# To run development stack:
# docker-compose --profile development up -d

# Production with monitoring:
# docker-compose --profile production --profile monitoring up -d

# Basic production:
# docker-compose up -d streamlit-app fastapi-service redis postgres mlflow